% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dgp.R
\docType{class}
\name{DGP}
\alias{DGP}
\title{\code{R6} class representing a data-generating process.}
\description{
A data-generating process which will be used in the
\code{Experiment} to \strong{generate} data.
}
\examples{

## ------------------------------------------------
## Method `DGP$generate`
## ------------------------------------------------

# function that loads in the iris data set and splits it into a training and test set
iris_dgp_fun <- function(train_prop = 0.5) {
  data(iris)
  X <- iris \%>\% dplyr::select(-Species)
  y <- iris \%>\% dplyr::pull(Species)
  train_ids <- sample(1:nrow(X), train_prop * nrow(X), replace = F)
  Xtrain <- X[train_ids, ]
  Xtest <- X[-train_ids, ]
  ytrain <- y[train_ids]
  ytest <- y[-train_ids]
  return(list(Xtrain = Xtrain, ytrain = ytrain, Xtest = Xtest, ytest = ytest))
}

# create DGP from iris_dgp_fun (with the default parameter train_prop = 0.5)
iris_dgp <- create_dgp(iris_dgp_fun)

# generate data from DGP
iris_dgp_out <- iris_dgp$generate()
str(iris_dgp_out)

# create DGP from iris_dgp_fun (with the 60\%-40\% training-test split)
iris_dgp2 <- create_dgp(iris_dgp_fun, train_prop = 0.6)
iris_dgp2$dgp_params

# generate data from DGP (with the 60\%-40\% training-test split)
iris_dgp2_out <- iris_dgp2$generate()
str(iris_dgp2_out)

# generate data from DGP, overwriting the initialized function arguments
iris_dgp3_out <- iris_dgp2$generate(train_prop = 0.75)
str(iris_dgp3_out)
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{dgp_fun}}{The data-generating process function.}

\item{\code{dgp_params}}{(Named) list of parameters to input into the
data-generating process function.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DGP$new()}}
\item \href{#method-generate}{\code{DGP$generate()}}
\item \href{#method-clone}{\code{DGP$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{DGP} (data-generating process).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DGP$new(dgp_fun, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dgp_fun}}{The data-generating process function.}

\item{\code{...}}{Arguments to pass into \code{dgp_fun()}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{DGP} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-generate"></a>}}
\if{latex}{\out{\hypertarget{method-generate}{}}}
\subsection{Method \code{generate()}}{
Generate data from a \code{DGP} with the provided \code{DGP}
parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DGP$generate(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments to pass into \code{dgp_fun()} that will overwrite
the initialized \code{DGP} parameters. If no additional arguments are
provided, data will be generated using \code{dgp_fun()} with the
parameters that were set when \code{DGP$new()} was called.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Result of \code{dgp_fun()}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{# function that loads in the iris data set and splits it into a training and test set
iris_dgp_fun <- function(train_prop = 0.5) {
  data(iris)
  X <- iris \%>\% dplyr::select(-Species)
  y <- iris \%>\% dplyr::pull(Species)
  train_ids <- sample(1:nrow(X), train_prop * nrow(X), replace = F)
  Xtrain <- X[train_ids, ]
  Xtest <- X[-train_ids, ]
  ytrain <- y[train_ids]
  ytest <- y[-train_ids]
  return(list(Xtrain = Xtrain, ytrain = ytrain, Xtest = Xtest, ytest = ytest))
}

# create DGP from iris_dgp_fun (with the default parameter train_prop = 0.5)
iris_dgp <- create_dgp(iris_dgp_fun)

# generate data from DGP
iris_dgp_out <- iris_dgp$generate()
str(iris_dgp_out)

# create DGP from iris_dgp_fun (with the 60\%-40\% training-test split)
iris_dgp2 <- create_dgp(iris_dgp_fun, train_prop = 0.6)
iris_dgp2$dgp_params

# generate data from DGP (with the 60\%-40\% training-test split)
iris_dgp2_out <- iris_dgp2$generate()
str(iris_dgp2_out)

# generate data from DGP, overwriting the initialized function arguments
iris_dgp3_out <- iris_dgp2$generate(train_prop = 0.75)
str(iris_dgp3_out)
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DGP$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
