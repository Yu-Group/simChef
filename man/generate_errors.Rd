% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dgp-lib-errors.R
\name{generate_errors}
\alias{generate_errors}
\title{Helper function to generate simulated errors.}
\usage{
generate_errors(err = NULL, n, X, ...)
}
\arguments{
\item{err}{Function from which to generate simulate error vector. Default
is \code{NULL} which returns an error vector of all zeros.}

\item{n}{Number of samples.}

\item{X}{Data matrix or data frame. Used to determine n if n is missing.}

\item{...}{Other arguments to pass to err() to generate the error vector.}
}
\value{
A vector of simulated errors with length \code{n}.
}
\description{
Generate simulated errors from the specified error function and
passed arguments.
}
\details{
The arguments \code{n} and \code{X} (if provided) are automatically
passed to the function \code{err} under arguments of the same name.
Note however that they may be unused arguments if \code{err} does not take
in arguments named \code{n} and/or \code{X} as input.
}
\examples{
# generate standard Gaussian error vector of length 150
errs <- generate_errors(err = rnorm, n = 150)
# or alternatively,
errs <- generate_errors(err = rnorm, X = iris)

# generate Gaussian error vector with mean 0 and sd 2
errs <- generate_errors(err = rnorm, n = 150, sd = 2)

# generate error vector of all 0s
errs <- generate_errors(err = NULL, n = 150)

# generate error vector from custom error function
err_fun <- function(n, rho) {
  # simulate correlated errors from a autoregressive-1 Gaussian process
  row1 <- rho^(0:(n - 1))
  Sigma <- stats::toeplitz(row1)
  return(MASS::mvrnorm(1, mu = rep(0, n), Sigma = Sigma))
} 
errs <- generate_errors(err = err_fun, n = 100, rho = 0.75)

}
