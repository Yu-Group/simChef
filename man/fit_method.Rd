% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/method.R
\name{fit_method}
\alias{fit_method}
\title{Fit a \code{Method}.}
\usage{
fit_method(method, data_list, ..., .simplify = TRUE)
}
\arguments{
\item{method}{A \code{Method} object.}

\item{data_list}{List of data to pass into \code{Method$method_fun()}.
If named, should match arguments in \code{Method$method_fun()}.}

\item{...}{Arguments to pass into \code{Method$method_fun()} that will
overwrite the initialized \code{Method} parameters. If no additional
arguments are provided, the \code{Method} will be fit using
\code{Method$method_fun()} and the parameters that were set when
\code{Method$new()} was called.}

\item{.simplify}{If TRUE, remove list wrapping from any column that has
scalar values.}
}
\value{
Result of \code{Method$method_fun()}, coerced into a single
tibble row.
}
\description{
Fit a \code{Method} on data using the provided \code{Method}
parameters.
}
\examples{
## create toy DGPs, Methods, Evaluators, and Visualizers

# generate toy data
dgp <- create_dgp(
  .dgp_fun = function(n) rnorm(n), .name = "DGP", n = 100
)

# compute mean of data
mean_method <- create_method(
  .method_fun = function(x) list(mean = mean(x)), .name = "Mean(x)"
)

# evaluate SD of mean(x) across simulation replicates
sd_mean_eval <- create_evaluator(
  .eval_fun = function(fit_results, vary_params = NULL) {
    group_vars <- c(".dgp_name", ".method_name", vary_params)
    fit_results \%>\%
      dplyr::group_by(dplyr::across(tidyselect::all_of(group_vars))) \%>\%
      dplyr::summarise(sd = sd(mean), .groups = "keep")
  },
  .name = "SD of Mean(x)"
)

# plot SD of mean(x) across simulation replicates
sd_mean_plot <- create_visualizer(
  .viz_fun = function(fit_results, eval_results, vary_params = NULL,
                      eval_name = "SD of Mean(x)") {
    if (!is.null(vary_params)) {
      add_aes <- ggplot2::aes(
        x = .data[[unique(vary_params)]], y = sd, color = .dgp_name
      )
    } else {
      add_aes <- ggplot2::aes(x = .dgp_name, y = sd)
    }
    plt <- ggplot2::ggplot(eval_results[[eval_name]]) +
      add_aes +
      ggplot2::geom_point()
    if (!is.null(vary_params)) {
      plt <- plt + ggplot2::geom_line()
    }
    return(plt)
  },
  .name = "SD of Mean(x) Plot"
)

# initialize experiment with toy DGPs, Methods, Evaluators, and Visualizers
experiment <- create_experiment(name = "Experiment Name") \%>\%
  add_dgp(dgp) \%>\%
  add_method(mean_method) \%>\%
  add_evaluator(sd_mean_eval) \%>\%
  add_visualizer(sd_mean_plot)

# fit, evaluate, and visualize (i.e., run) experiment
fit_results <- fit_experiment(experiment, n_reps = 10)
eval_results <- evaluate_experiment(experiment, fit_results)
viz_results <- visualize_experiment(experiment, fit_results, eval_results)

# example usage of generate_dgp which generates one replicate
data_out <- generate_dgp(dgp)

# example usage of fit_method on a single data replicate
method_out <- fit_method(mean_method, data_out)

# example usage of evaluate_evaluator and visualize_visualizer
eval_out <- evaluate_evaluator(sd_mean_eval, fit_results)
all.equal(eval_out, eval_results[[1]])
viz_out <- visualize_visualizer(sd_mean_plot, fit_results, eval_results)
all.equal(viz_out, viz_results[[1]])

}
