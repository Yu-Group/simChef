% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/experiment-helpers.R
\name{add_funs}
\alias{add_funs}
\alias{add_dgp}
\alias{add_method}
\alias{add_evaluator}
\alias{add_visualizer}
\title{Helper functions for adding components to an \code{Experiment}.}
\usage{
add_dgp(experiment, dgp, name = NULL, ...)

add_method(experiment, method, name = NULL, ...)

add_evaluator(experiment, evaluator, name = NULL, ...)

add_visualizer(experiment, visualizer, name = NULL, ...)
}
\arguments{
\item{experiment}{An \code{Experiment} object.}

\item{dgp}{A \code{DGP} object.}

\item{name}{A name to identify the object to be added.}

\item{...}{Not used.}

\item{method}{A \code{Method} object.}

\item{evaluator}{An \code{Evaluator} object.}

\item{visualizer}{A \code{Visualizer} object.}
}
\value{
The original \code{Experiment} object passed to \verb{add_*}.
}
\description{
Helper functions for adding \code{DGPs}, \code{Methods},
\code{Evaluators}, and \code{Visualizers} to an \code{Experiment}.
}
\examples{
## create toy DGPs, Methods, Evaluators, and Visualizers

# generate data from normal distribution with n samples
normal_dgp <- create_dgp(
  .dgp_fun = function(n) rnorm(n), .name = "Normal DGP", n = 100
)
# generate data from binomial distribution with n samples
bernoulli_dgp <- create_dgp(
  .dgp_fun = function(n) rbinom(n, 1, 0.5), .name = "Bernoulli DGP", n = 100
)

# compute mean of data
mean_method <- create_method(
  .method_fun = function(x) list(mean = mean(x)), .name = "Mean(x)"
)

# evaluate SD of mean(x) across simulation replicates
sd_mean_eval <- create_evaluator(
  .eval_fun = function(fit_results, vary_params = NULL) {
    group_vars <- c(".dgp_name", ".method_name", vary_params)
    fit_results \%>\%
      dplyr::group_by(dplyr::across(tidyselect::all_of(group_vars))) \%>\%
      dplyr::summarise(sd = sd(mean), .groups = "keep")
  },
  .name = "SD of Mean(x)"
)
# plot SD of mean(x) across simulation replicates
sd_mean_plot <- create_visualizer(
  .viz_fun = function(fit_results, eval_results, vary_params = NULL,
                      eval_name = "SD of Mean(x)") {
    if (!is.null(vary_params)) {
      add_aes <- ggplot2::aes(
        x = .data[[unique(vary_params)]], y = sd, color = .dgp_name
      )
    } else {
      add_aes <- ggplot2::aes(x = .dgp_name, y = sd)
    }
    plt <- ggplot2::ggplot(eval_results[[eval_name]]) +
      add_aes +
      ggplot2::geom_point()
    if (!is.null(vary_params)) {
      plt <- plt + ggplot2::geom_line()
    }
    return(plt)
  },
  .name = "SD of Mean(x) Plot"
)

# initialize experiment with toy DGPs, Methods, Evaluators, and Visualizers
# using piping \%>\% and add_* functions
experiment <- create_experiment(name = "Experiment Name") \%>\%
  add_dgp(normal_dgp) \%>\%
  add_dgp(bernoulli_dgp) \%>\%
  add_method(mean_method) \%>\%
  add_evaluator(sd_mean_eval) \%>\%
  add_visualizer(sd_mean_plot)
print(experiment)

# this is equivalent to
experiment <- create_experiment(
  name = "Experiment Name",
  dgp_list = list(`Normal DGP` = normal_dgp, `Bernoulli DGP` = bernoulli_dgp),
  method_list = list(`Mean(x)` = mean_method),
  evaluator_list = list(`SD of Mean(x)` = sd_mean_eval),
  visualizer_list = list(`SD of Mean(x) Plot` = sd_mean_plot)
)

}
