% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dgp.R
\name{create_dgp}
\alias{create_dgp}
\title{Create a new \code{DGP} (data-generating process).}
\usage{
create_dgp(dgp_fun = NULL, ...)
}
\arguments{
\item{dgp_fun}{The data-generating process function.}

\item{...}{Arguments to pass into \code{dgp_fun()}.}
}
\value{
A new instance of \code{DGP}.
}
\description{
Create a new \code{DGP} (data-generating process).
}
\examples{
# function that loads in the iris data set and splits it into a training and test set
iris_dgp_fun <- function(train_prop = 0.5) {
  data(iris)
  X <- iris \%>\% dplyr::select(-Species)
  y <- iris \%>\% dplyr::pull(Species)
  train_ids <- sample(1:nrow(X), train_prop * nrow(X), replace = F)
  Xtrain <- X[train_ids, ]
  Xtest <- X[-train_ids, ]
  ytrain <- y[train_ids]
  ytest <- y[-train_ids]
  return(list(Xtrain = Xtrain, ytrain = ytrain, Xtest = Xtest, ytest = ytest))
}

# create DGP from iris_dgp_fun (with the default parameter train_prop = 0.5)
iris_dgp <- create_dgp(iris_dgp_fun)

# generate data from DGP
iris_dgp_out <- iris_dgp$generate()
str(iris_dgp_out)

# create DGP from iris_dgp_fun (with the 60\%-40\% training-test split)
iris_dgp2 <- create_dgp(iris_dgp_fun, train_prop = 0.6)
iris_dgp2$dgp_params

# generate data from DGP (with the 60\%-40\% training-test split)
iris_dgp2_out <- iris_dgp2$generate()
str(iris_dgp2_out)

# generate data from DGP, overwriting the initialized function arguments
iris_dgp3_out <- iris_dgp2$generate(train_prop = 0.75)
str(iris_dgp3_out)
}
