% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualizer-lib-feature-selection.R
\name{plot_feature_selection_curve}
\alias{plot_feature_selection_curve}
\title{Plot ROC/PR curves for feature selection.}
\usage{
plot_feature_selection_curve(
  fit_results = NULL,
  eval_results = NULL,
  eval_name = NULL,
  eval_fun = "summarize_feature_selection_curve",
  eval_fun_options = NULL,
  vary_params = NULL,
  curve = c("ROC", "PR"),
  show = c("line", "ribbon"),
  ...
)
}
\arguments{
\item{fit_results}{A tibble, as returned by \code{fit_experiment()}.}

\item{eval_results}{A list of result tibbles, as returned by
\code{evaluate_experiment()}.}

\item{eval_name}{Name of \code{Evaluator} containing results to plot. If
\code{NULL}, the data used for plotting is computed from scratch via
\code{eval_fun}.}

\item{eval_fun}{Character string, specifying the function used to compute
the data used for plotting if \code{eval_name = NULL}. If \code{eval_name}
is not \code{NULL}, this argument is ignored.}

\item{eval_fun_options}{List of named arguments to pass to \code{eval_fun}.}

\item{vary_params}{A vector of parameter names that are varied across in the
\code{Experiment}.}

\item{curve}{Either "ROC" or "PR" indicating whether to plot the ROC or
Precision-Recall curve.}

\item{show}{Character vector with elements being one of "boxplot", "point",
"line", "bar", "errorbar", "ribbon" indicating what plot layer(s) to
construct.}

\item{...}{Additional arguments to pass to
\code{\link{plot_eval_constructor}}.}
}
\value{
If \code{interactive = TRUE}, returns a \code{plotly} object if
\code{plot_by} is \code{NULL} and a list of \code{plotly} objects if
\code{plot_by} is not \code{NULL}. If \code{interactive = FALSE}, returns
a \code{ggplot} object if \code{plot_by} is \code{NULL} and a list of
\code{ggplot} objects if \code{plot_by} is not \code{NULL}.
}
\description{
Plot ROC/PR curves for feature selection or some summary thereof
across experimental replicates.
}
\examples{
# generate example fit_results data
fit_results <- tibble::tibble(
  .rep = rep(1:2, times = 2),
  .dgp_name = c("DGP1", "DGP1", "DGP2", "DGP2"),
  .method_name = c("Method"),
  feature_info = lapply(
    1:4,
    FUN = function(i) {
      tibble::tibble(
        # feature names
        feature = c("featureA", "featureB", "featureC"),
        # true feature support
        true_support = c(TRUE, FALSE, TRUE),
        # estimated feature support
        est_support = c(TRUE, FALSE, FALSE),
        # estimated feature importance scores
        est_importance = c(10, runif(2, min = -2, max = 2))
      )
    }
  )
)

# generate example eval_results data
eval_results <- list(
  ROC = summarize_feature_selection_curve(
    fit_results,
    curve = "ROC",
    nested_cols = "feature_info",
    truth_col = "true_support",
    imp_col = "est_importance"
  ),
  PR = summarize_feature_selection_curve(
    fit_results,
    curve = "PR",
    nested_cols = "feature_info",
    truth_col = "true_support",
    imp_col = "est_importance"
  )
)

# create summary ROC/PR plots using pre-computed evaluation results
roc_plt <- plot_feature_selection_curve(eval_results = eval_results,
                                        eval_name = "ROC", curve = "ROC",
                                        show = c("line", "ribbon"))
pr_plt <- plot_feature_selection_curve(eval_results = eval_results,
                                       eval_name = "PR", curve = "PR",
                                       show = c("line", "ribbon"))
# or alternatively, create the same plots directly from fit results
roc_plt <- plot_feature_selection_curve(fit_results = fit_results,
                                        show = c("line", "ribbon"),
                                        curve = "ROC",
                                        eval_fun_options = list(
                                          nested_cols = "feature_info",
                                          truth_col = "true_support",
                                          imp_col = "est_importance"
                                        ))
pr_plt <- plot_feature_selection_curve(fit_results = fit_results,
                                       show = c("line", "ribbon"),
                                       curve = "PR",
                                       eval_fun_options = list(
                                         nested_cols = "feature_info",
                                         truth_col = "true_support",
                                         imp_col = "est_importance"
                                       ))

# can customize plot (see plot_eval_constructor() for possible arguments)
roc_plt <- plot_feature_selection_curve(eval_results = eval_results,
                                        eval_name = "ROC", curve = "ROC",
                                        show = c("line", "ribbon"),
                                        plot_by = ".dgp_name")

}
\seealso{
Other feature_selection_funs: 
\code{\link{eval_feature_importance_funs}},
\code{\link{eval_feature_selection_curve_funs}},
\code{\link{eval_feature_selection_err_funs}},
\code{\link{plot_feature_importance}()},
\code{\link{plot_feature_selection_err}()}
}
\concept{feature_selection_funs}
